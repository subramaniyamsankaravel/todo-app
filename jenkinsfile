pipeline{
    agent any;
     tools{
       maven 'maven'
       jdk 'JDK'
   }
    stages{
        
        /*stage('Maven package'){
            steps{
                bat 'mvn -f app/pom.xml package'

            }
        }
        stage('sonar analysis'){
            steps{
                withSonarQubeEnv('sonar'){
                    bat 'mvn -f app/pom.xml sonar:sonar'
                }
            }
        }
        stage('deploy to artifactor'){
            steps{
                rtUpload (
            serverId: 'ARTIFACTORY-SERVER',
            spec: '''{
                 "files": [
                             {
                                "pattern": "app/target/*.war",
                                "target": "art-doc-dev-loc/"
                            }
                        ]
            }''',
            )

            }
        }
        stage('download artifact'){
            steps{
                 rtDownload (
                 serverId: "ARTIFACTORY-SERVER",
                spec:"""{
                     "files": [
                                {
                                    "pattern": "art-doc-dev-loc/**",
                                    "target": "app/artifacts/"      
                                }
                            ]
              }"""
            )
            
            }
        }

        
        stage('Docker build'){
            steps{
               
                    bat 'docker image prune -a --force'
                    bat 'docker-compose build'
                
                
            }
        }
        stage('Pushing images to docker hub'){
            steps{
                   withCredentials([string(credentialsId: 'dockerpass', variable: 'dockerPWD')]) {
                   bat "docker login -u subramaniyam -p ${dockerPWD}"
                   }
                   bat "docker tag practice_app:latest subramaniyam/todo-app:latest"
                bat "docker push subramaniyam/todo-app:latest"

            }
        }
        stage('creating kubernetes cluster'){
            steps{
                   dir("C:/Users/Welcome/Desktop/New folder/learn-terraform-provision-aks-cluster"){
                   //bat "cd C:\Users\Welcome\Desktop\New folder\learn-terraform-provision-aks-cluster"
                   bat "terraform init"
                bat "terraform plan"
               }
            }
        }*/
        stage('deploying it to kubernetes'){
            steps{
                //sh 'chmod +x change-tag.sh'
                //sh """./change-tag.sh v${env.BUILD_ID}"""
                //sh 'cat k8s/api-deployment.yaml'
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://brave-rodent-k8s-9a144257.hcp.westus2.azmk8s.io:443') {
                                // some block
                    bat 'kubectl apply -f k8s/database-deployment.yaml'
                    
                }
                sleep(120)
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://brave-rodent-k8s-9a144257.hcp.westus2.azmk8s.io:443') {
                                // some block
                    bat 'kubectl apply -f k8s/api-deployment.yaml'
                    bat 'kubectl get pods'
                    bat 'kubectl get svc'
                    
                }

            }
        }
       
    

    }
    post{
            success{
                mail bcc: '', body: "<b>Pipeline Success</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br>Last Stage Completed: $last_started <br> URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "Pipeline Information System: ${env.JOB_NAME}", to: "subramaniyam11981@gmail.com";
            }
            failure{
                mail bcc: '', body: "<b>Pipeline Failure</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br>Stage Name: $last_started <br> URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "Pipeline Information System: ${env.JOB_NAME}", to: "subramaniyam11981@gmail.com";
            }
        }
}
